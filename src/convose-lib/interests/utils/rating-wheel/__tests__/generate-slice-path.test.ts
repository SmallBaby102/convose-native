import { generateSlicePath } from "../"
import { Slice } from "../../../"

const PATH: ReadonlyArray<string> = [
  "M90.95053600721657,0A3,3,0,0,1,93.9489053261358,3.098901098901099A94,94,0,0,1," +
    "-93.9489053261358,3.09890109890113A3,3,0,0,1,-90.95053600721657,1.0658141036401503e-14L-55.91958512006326," +
    "6.661338147750939e-15A3,3,0,0,1,-52.923893060059875,2.8392857142857206A53,53,0,0,0,52.92389306005987," +
    "2.8392857142857144A3,3,0,0,1,55.91958512006326,0Z",
  "M-90.95053600721657,1.0658141036401503e-14A3,3,0,0,1," +
    "-93.9489053261358,-3.098901098901088A94,94,0,0,1,93.9489053261358,-3.0989010989011216A3,3,0,0,1," +
    "90.95053600721657,-2.220446049250313e-14L55.91958512006326,-1.3322676295501878e-14A3,3,0,0,1," +
    "52.923893060059875,-2.8392857142857264A53,53,0,0,0,-52.92389306005987,-2.839285714285714A3,3,0,0,1," +
    "-55.91958512006326,6.661338147750939e-15Z",
]

describe("generate-slice-path", () => {
  it("should return slice paths", () => {
    const slices: ReadonlyArray<Slice> = [
      {
        end: Math.PI,
        start: 0,
      },
      {
        end: Math.PI * 2,
        start: Math.PI,
      },
    ]
    const radius = 100
    const result = slices.map((slice) => generateSlicePath(slice, radius))
    expect(result).toEqual(PATH)
  })
})
